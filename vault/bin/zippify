#!/bin/bash 

# Order in which curl requests are issued 
#   modified/parcels 
#   modified/zips 
#   zip/contents 
#   update/zip 

if [[ $1 ]] ; then 
  case $1 in 
    -r) server=http://www.gradians.com ;;
    *) server=http://localhost:3000 ;;
  esac 
else 
  server=http://localhost:3000
fi 

function reprocess_zips_in() { 
  local json=p$1.json
  curl "$server/modified/zips?id=$1" > $json 
  z_last=$(($(jq length $json)-1))

  for z in $(seq 0 $z_last) ; do 
    zid=$(jq ".id[$z]" $json)
    rezip $zid
  done 
  rm -f $json
} 

function rezip() { 
  local json=z$1.json
  curl "$server/zip/contents?id=$1" > $json
  response=$(curl "$server/zip/contents?id=$1")

  # Extract values from JSON

  read zip_name chapter type<<<$(jq ".name,.chapter,.type" $json | cut -d'"' -f2)
  sku_list=$(jq ".skus" $json)
  sku_last=$(($(jq length $json)-1))

  target_zip=$zip_name.zip
  catalog=zip-catalogs/$zip_name.xml
  # echo $target_zip

  # cd to $VAULT so that zips have relative paths 
  cd $VAULT 
  open_catalog $catalog

  for s in $(seq 0 $sku_last) ; do 
    sku=$(echo $sku_list | jq .[$s])
    read path id <<<$(echo $sku | jq ".path,.id" | cut -d'"' -f2)
    echo "<sku id=\"$id\" type=\"$type\" path=\"$path\" chapter=\"$chapter\" />" >> $catalog

    zip -r $target_zip $path/{layout.xml,*.svg}
  done 

  close_catalog $catalog
  zip -r $target_zip $catalog

  # Now that we have a re-generated zip file, it is time to 
  # inform the server of the zip's new SHASUM

  sha=$(shasum $target_zip | cut -c1-8)
  curl "$server/update/zip?id=$1&shasum=$sha"
  mv $target_zip zips/

  # ... and then come back to where you issued zippify command from
  cd - 
  rm -f $json
} 

function open_catalog { 
  echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>" > $1 
  echo "<content>" >> $1 
} 

function close_catalog {
  echo "</content>" >> $1 
} 


modified=modified.json
curl "$server/modified/parcels" > $modified
p_last=$(($(jq '.id|length' $modified)-1))

if [ $p_last -lt 0 ] ; then 
  rm -f $modified
  exit 1 ; 
fi

# Iterate over modified parcels 
for p in $(seq 0 $p_last) ; do 
  pid=$(jq ".id[$p]" $modified)
  reprocess_zips_in $pid 
done 

rm -f $modified
