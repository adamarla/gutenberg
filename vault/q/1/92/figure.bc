
/*
	Write methods for calculating f(x) below. 
	Note that you can plot more than curve on the same figure. 

	See methods 'draw_plots' and 'draw_curve'
*/

define plot(x) {
  return ((6/25)*(x^2))
}

/* ****************************************************************************
  User editable variables that will impact what the plot looks like.
  Example:
    1. To change the x-range over which the plot is generated, change 
       the xstart and xstop variables
    2. To change the # of plot points, change 'n'

*******************************************************************************/

pi = 4*a(1)  /* define pi */
xstart = -5   /* Lower bound of the interval */
xstop = 5     /* Upper bound of the interval */
n = 30     /* Number of points to be computed */
deltax = (xstop-xstart)/(n-1)
xdim = 70  /* Horizontal dimension of the figure in mm */
ydim = 70  /* Vertical   dimension of the figure in mm */
precision = 1     /* Number of significant digits printed (>= 0)*/
trueorig = 1 /* Equals 1 if the true origin must be used, 0 otherwise. */
label_axes = 0 /* if 0, then value labels will NOT be placed on axes */

ymin = -1 
ymax = ymin;
xscale = 0 ;
yscale = 0 ;

/* ****************************************************************************
  Useful utility functions. Ordinarily, there should be no need to 
  edit them
*******************************************************************************/

define void set_scaling_factors() {
  for (i = 0; i < n; i++){
   x = xstart + i*deltax
   y = plot(x)
   if (y<ymin) ymin = y
   if (y>ymax) ymax = y
  }
  xscale = xdim/(xstop-xstart)
  yscale = ydim/(ymax-ymin)
}

define format(n,x){
  auto y
  scale = n 
  y = x/1
  scale = 20
  return (y)
}

define round(n,x){
  auto y, z
  z = 10^(n+1)
  d = 5 
  if (x<0) d = -d
  y=z*x+d
  scale=n
  y=y/z
  scale=20
  return(y)
}

define void write_graph_legend( legend ) {
  print "\\def\\GraphLegend{$", legend, "$}\n"
}

define void initialize() {
  print "% 1. Definition of characteristic points\n"
  print "\\figinit{pt}\n"

  if ( trueorig == 1 ) {
    print "\\def\\Xmin{", format(5,xstart*xscale), "}\n"
    print "\\def\\Ymin{", format(5,ymin*yscale), "}\n"
    print "\\def\\Xmax{", format(5,xstop*xscale), "}\n"
    print "\\def\\Ymax{", format(5,7*yscale), "}\n"
    print "\\def\\Xori{", format(5,-xstart*xscale), "}\n"
    print "\\def\\Yori{", format(5,-ymin*yscale), "}\n"
  } else {
    print "\\def\\Xmin{0}\n"
    print "\\def\\Ymin{0}\n"
    print "\\def\\Xmax{", xdim, "}\n"
    print "\\def\\Ymax{", ydim, "}\n"
    print "\\def\\Xori{0}\n"
    print "\\def\\Yori{0}\n"
  }
  print "\\figpt0:(\\Xori,\\Yori)\n"
}

define void draw_axes() {
  print "% 2. Creation of the graphical file\n"
  print "\\figdrawbegin{}\n"
  print "\\def\\Xmaxx{\\Xmax} % To customize the position\n"
  print "\\def\\Ymaxx{\\Ymax} % of the arrow-heads of the axes.\n"
  print "\\figset arrowhead(length=4, fillmode=yes) % styling the arrowheads\n"
  print "\\figdrawaxes 0(\\Xmin, \\Xmaxx, \\Ymin, \\Ymaxx)\n"
}

define void draw_curve(values[]) {
	print "\\figdrawlineC(\n"

	for (j = 0 ; j < n ; j++) {
		y = values[j]
		x = xstart + j*deltax

		if (j != (n - 1)) {
			print format(5,(x-xstart)*xscale), " ", format(5,(y-ymin)*yscale), ",\n"
		} else { 
			print format(5,(x-xstart)*xscale), " ", format(5,(y-ymin)*yscale), "\n"
			print ")\n"
		} 
	} 
}

define void draw_plots() {
	h = b[n]

	for ( j = 0 ; j < n ; j++ ) {
		x = xstart + j*deltax 
		h[j] = plot(x)
	} 

	draw_curve(h[])
  print "\\figdrawend\n"
}

define void label_drawing() {
  print "% 3. Writing text on the figure\n"
  print "\\figvisu{\\figBoxA}{}{%\n"
  print "\\figptsaxes 1:0(\\Xmin, \\Xmaxx, \\Ymin, \\Ymaxx)\n"
  print "% Points 1 and 2 are the end points of the arrows\n"
  print "\\figwritee 1:(5pt)     \\figwriten 2:(5pt)\n"
  print "\\figptsaxes 1:0(\\Xmin, \\Xmax, \\Ymin, \\Ymax)\n"

  if (label_axes == 1) {
    print "% Points 1 and 2 are the first two end points of the axes\n"
    print "\\figwrites 1:$",round(precision,xstop),"$(5pt) \\figwritew 2:$",round(precision,ymax),"$(8pt)\n"
    print "% Points 3 and 4 are the two other end points of the axes\n"
    print "\\figpttraC 3:=0/\\Xmin,0/ \\figwrites 3:$",round(precision,xstart),"$(5pt) \n"
    print "\\figpttraC 4:=0/0,\\Ymin/ \\figwritew 4:$",round(precision,ymin),"$(8pt)\n"
  }

  print "}\n"
  print "\\centerline{\\box\\figBoxA}\n"
}

/* ****************************************************************************
  Call the above utility functions now to generate the TeX file. 
  The code below should also not change ordinarily. Only the internals 
  of some of the functions below would need to change
 *****************************************************************************/

 set_scaling_factors()
 initialize() 
 /*write_graph_legend("y=x^2")*/
 draw_axes()
 draw_plots()
 label_drawing()
 quit

